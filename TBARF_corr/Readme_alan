Hi Alan,

Thx for the paper, it will be very usefull for my thesis.

I Made some changes to the code and uploaded the new
version to the github under
https://github.com/LarsHunger/TBARF/tree/master/TBARF_corr
.
All the new parts are in This TBARF_corr folder.

If you are using Visual studio you should be able to just
open the projects and they hopefully should compile.

The parts are:
a) Calc_Line_matrix:
For creating Random fields with a Correlation functions we
use this little support program. This is done because we
need to do the eigenvector/eigenvalue decomposition of the
correlation-matrix for the lines. This is quite time
intensive but only needs to be done once for a given
correlation matrix. So we do this before the main program.
This programm uses dysev from the Intel Math-Kernel
library, so you will need the MKL to compile it. If you
can't use the MKL you can also compile it with LAPACK this
would only require minor changes in the code (the lapacke
call has to be changed to a lapack call). If you have
trouble compiling this code let me know.

How can you use this program? After compiling it you can
call it from the command line with
Calc_line int(linelength) str(filename) double(a)
It will then calculate the eigenvector decomposition of a
correlation matrix for the size of linelength, this matrix
is then written into a file (filename). The parameter a is
the range parameter for the given correlation function.
Currently it solves the Decomposition for a double
exponential ( exp(-(r/a^2)) ) but you can change the
function to whatever correlation structure you need. Be
careful to use the 1D correlation function that generates
the correct 3D correlation structure though. (You get this
by C_1D=d/dr[r*C_3D] ). The linelength value should be
taken to be 2*linelength that is used in Turning-band
later.
A in the regular grid always has a size of 1 unit and the
range parameter a is also given in units of the edge-length
of one of the grid-cubes.

b) Turning_band:
This is the Main code. In the old version the icl-wrapper
was missing. I added it into the folder icl_cuda, this
wrapper is not the innovative computing library but
something that was written at the university of innsbruck
(as far as I know). I was able to compile the code with
these files.  I only tried the Open_cl version though so in
the Tuning_band folder only the OpenCL files are present.
If you can open the project with visual studio it should
compile. However, If you don't use VS  I think it should
work anyway, since you only seem to be missing the icl
files we forgot to add last time. After compiling, if you
run the executable the libfftw3-3 from fft_64 and the
turning_band.cl file from the Turning_band folder need to
be in the same folder as the executable, otherwise it will
not run correctly (at least It didn't on my system).

After compiling you can run the code simple by starting the
executable. The runtime parameter are somewhat improperly
locaed in line 36 off the 3DPLc_v7_tubes.cpp (where the
main is too).
the tbarf_param t1 = { 0, 1024, 256, 128, 128, 128, 250,
1,0,"Corr.dat","Field_128_a_25_trans" }; struct controls
the program. This struct is still a leftover from the
development off the OpenCL code. If you want more proper
runtime parameters you can ofc change this. So what do the
parameters mean:
(see Line 18 and 36 in 3DPLc_v7_tubes.cpp)
double Plindex-> not used in the Correlation-function
version, I would leave it at 0;
int nr_lines -> The number of lines used for generating
turning-bands... the number of bands, the appropriate
number depends on the dimensionality of the field, for 3D
fields 1000 is usually a good value though.
int linelength -> the length of the line in unit lengths,
making single elements on the lines smaller than unit
length does not improve the field, so we just decided that
the cell-size of the 1D lines or bands will be one unit
length. This value controls how long one line is. The
length of the line needs to be larger than the space
diagonal of the 3D cube. It also should be exactly half the
linelength that you used for in the Calc_line_matrix code.
int x,y,z; x,y,z extension of the regular random field to
be calculated.
int nr_3Dfields -> how many fields shall be calculated
double resolutionfactor -> also not used for the
correlation function code
linetype -> should be 0 to generate the lines with a
correlation function.
string filename -> the name of the file with the
eigenvectors*sqrt(eigenvalues) matrix generated by
Calc_line_Matrix that will be used for the Karhuenen-loeve
expansion that generates the 1D random field Lines.
string filename_out_base -> the base name for the random
fields to be written onto the harddrive (Full filename will
be filename_out_base+_nr_field.dat).
So tbarf_param t1 = { 0, 1024, 256, 128, 128, 128, 250,
1,0,"Corr.dat","Field_128_a_25_trans" }; generates 250
random fields with dimension 128^3 , by using 1024 lines
with linelength 256 by using the Correlation file Corr.dat.
The fields are written into the files
Field_128_a_25_trans_0.dat,Field_128_a_25_trans_1.dat, ...
Field_128_a_25_trans_98.dat Field_128_a_25_trans_99.dat.

All the files are written in standard C++ binary files. I
didn't want to add more libraries to complicate the
compilation even more (I had to fight quite a bit with it
yesterday ^^).

c) Check_corr_gauss:
This is just a little testing programm. It should be easy
to compile since it doesn't really use any special
libraries. After compiling it can be called with
Check_corr nr_3dfields fielddim basename  (how many 3D
fields, what size (assuming x=y=z) and what is the base
name of the fields).
The programm will then calculate the expectation and
variance for every field and write it to stdout.
It will also calculate the expectation and variance for
every point across all fields and write this into an Ascii
file called Expectation_variance_field.dat. It will also
calculate the Correlation from all points in the fields
with a reference point(64,64,64) and the distance of the
points to that reference point. Afterwards it will write
the correlation with
and the distance to the reference point in afile called
Correlation.dat. This is primary for control purposes.
(This programm needs at least 50 fields as input to be
usefull.)

A typical sequence would be:
Calc_line_Matrix 4096 Correlation.dat 25.0 -> Creates file
Correlation.dat (The linelength is chosen as 4096 since I
choose 2048 in t_params for the x,y,z_dim 1024 field
)
Turning_bands.exe with tbarf_param t1 = { 0, 1024, 2048,
1024, 1024, 1024, 5,
1,0,"Correlation.dat","Field_1024_a_25" };
That would create 5 fields with 1024^3 regulary arranged
points with a double exponential correlation function with
a range-parameter of 25. ( On a non-scientific GTX1070 that
would roughly take 10 minutes).

All the Random fields that are generated are Gaussian,
stationary and isotropic. They should also have 0-mean and
unit variance (altough single realisations might differ by
a bit.)

Hope that was not too confusing.
If you have any questions let me know.

Sorry for the long mail again.

Cheers,
Lars
